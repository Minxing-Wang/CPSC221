Student Name #1: Ao Lin (Daniel) Gong
Student ugrad login #1: v4w9a

Student Name #2: Minxing Wang
Student ugrad login #2: v3d0b

Team name (for fun!): TODO: MC

Acknowledgment that you understand and have followed the course's
collaboration policy
(http://www.ugrad.cs.ubc.ca/~cs221/current/syllabus.shtml#conduct):

TODO: Ao Lin Gong, Minxing Wang

TODO: submit using: make handin-proj1

----------------------------------------------------------------------

Approximate hours on project: TODO:
10, including Earlybird
----------------------------------------------------------------------

For teams, rough breakdown of work: TODO:
Implemented everything, including the Earlybird together
----------------------------------------------------------------------

Acknowledgment of assistance: TODO:
James Huang, Daniel Levy
----------------------------------------------------------------------

Questions:

For the explanations, generally a sentence or two should be enough.
Type your answers directly in this file.


1.  Edit solve.cpp to use either of your queue classes to solve Mazes
1, 2, 3, and 4.  Set a large enough delay in the solveMaze function
(like 200000) to watch what's happening.  Do you see why this is called
breadth-first search (BFS)?  How many steps long were your solutions?
How does this compare with DFS?

TODO: ArrayQueue: 	Maze 1 - 58 steps 				Maze 2 - 14 steps 
					Maze 3 - 5 steps				Maze 4 - 90 steps

2.  Try to solve the blank Sudoku board using your ArrayQueue
and LinkedListQueue classes.  What happens?  Why?

TODO: Since BFS is based on a queue(FIFO), it takes a really long time for ArrayQueue and
LinkedListQueue to fill the empty Sudoku board.

3.  Switch to the medium-difficulty Sudoku problem, and comment
out the delay and the print statements in the solveMaze function.
How long does it take to solve the puzzle using your ArrayQueue
class?  Using your LinkedListQueue class?  Is the difference big?

TODO: 	ArrayQueue: 1m3.095s
		LinkedListQueue: 59.677s

4.  Edit solve.cpp to switch to the 4x4 and then 5x5 slider puzzles.
Make sure to comment out the delay and print statements in the solveMaze
function.  How long does it take to solve these puzzles with your
HeapPriorityQueue versus my UnsortedPriorityQueue?  For most students,
mine will be faster?  Why might that happen?  Are the asymptotic
runtimes for the heap versus the unsorted array wrong?

TODO:
HeapPriorityQueue: 			4x4 - 29.224s		5x5 - 38.177s
UnsortedPriorityQueue:		4x4 - 4.687s		5x5 - 2m16.986s

----------------------------------------------------------------------

We will be checking your implementations of ArrayQueue, LinkedListQueue,
and HeapPriorityQueue.
